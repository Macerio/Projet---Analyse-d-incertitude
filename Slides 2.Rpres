Analyse d'incertitude:Réactions chimiques liées au stockage du CO2
========================================================
author: Marie-Cécile RIOM & Hugo SECHIER
date: 9 janvier 2017

```{r, echo = FALSE, warning=FALSE}
library(DiceKriging) #for km
library(sensitivity) #for morris
library(ggplot2) # plot 
library(rpart) # Tree model
library(rpart.plot) # plot tree
library(corrplot) # plot correlation
library(randtoolbox) # for sobol 
library(DiceDesign) # For mindist
library(plotly) # plot
suppressWarnings(suppressMessages(library(randomForest)))
library(rpart)
library(rpart.plot)
library(plotly)
chemin = "~/Google Drive/INSA/Analyse d'incertitude/Projet"
jdd.1 = read.csv(paste(chemin,'/jdd_1.csv',sep=""),header= T )
```

Présentation du problème
========================================================

• **But** : Analyser les interactions ... 

• **Moyen** : Deux jeu de données ...

Compréhension des données
========================================================
```{r, echo = FALSE, warning=FALSE}
summary(jdd.1)
```

Compréhension des données
========================================================
```{r, echo = FALSE, warning=FALSE}
X = jdd.1[,1:(length(jdd.1)-2)]
for (i in 1:dim(X)[2]){
  X[,i]=as.numeric(X[,i])
}
Y = jdd.1[,(length(jdd.1)-1):(length(jdd.1))]
Y1 = data.frame(Y$X.wgt_calcite)
Y2 = data.frame(Y$X.wgt_chlorite)
X = scale(X)
X = data.frame(X)
data = data.frame(y= Y1,X)
data_full = data.frame(y= Y,X)
library(corrplot)
cor <- cor(data_full)
# Pour l'afficher dans une autre fenetre
corrplot(cor, type="upper", order = "AOE", tl.col="black", tl.srt=55, tl.cex = 0.7)
```

Modélisation
========================================================
right : 20%
### Création d'un modèle pour expliquer la concentration de calcite

Visualisation d'un exemple d'arbre avec les variables les plus importantes


```{r, echo = FALSE, warning=FALSE}
#### Tree
model.tree = rpart(data$Y.X.wgt_calcite~.,data = data,cp = 0.01)
#printcp(model.tree)
param=model.tree$cptable
cp.optim=model.tree$cptable[which.min(model.tree$cptable[,"xerror"]),"CP"]
arbre=prune(model.tree,cp=cp.optim)
rpart.plot(arbre)
```


Algorithme de Morris pour la concentration de calcite
========================================================
```{r, echo = FALSE}
#### RandomForest
model.RF = randomForest(data$Y.X.wgt_calcite~.,data = data)
#varImpPlot(model.RF)
#Imp = data.frame(name = rownames(model.RF$importance), IncNodePurity = model.RF$importance)

#### Morris
binf = apply(X,2,min)
bsup = apply(X,2,max)
scale.unif <- function(x) {
  return(x*(bsup-binf) + binf)
}
RF =function(X){
  X.scaled <- data.frame(t(apply(X,1,scale.unif)))
  return(predict(model.RF,X.scaled))
}

model.morris = morris(RF,factors =colnames(X),design = list(type = "oat", levels = 10, grid.jump = 3), r = 20)
d=data.frame(x1=c(1,3,1,5,4), x2=c(2,4,3,6,6), y1=c(1,1,4,1,3), y2=c(2,2,5,3,5), t=c('a','a','a','b','b'), r=c(1,2,3,4,5))
# Better plot
mu <- apply(model.morris$ee, 2, mean)
mu.star <- apply(model.morris$ee, 2, function(x) mean(abs(x)))
sigma <- apply(model.morris$ee, 2, sd)

#plot(mu.star, sigma)
marice= data.frame(name = model.morris$factors,mu.star,sigma)
d=data.frame(x1=c(0,0.003,0.002), x2=c(0.002,0.005,max(mu.star)+0.001), y1=c(0,0.001,0.008), y2=c(0.004,0.006,max(sigma)+0.001),
             t =c('Non influents','Effets linéaires','Effets non linéaires ou interactions') , 
             r=c(1,2,3))

g <- ggplot(marice) +
  geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color="black", alpha=0.5) +
  geom_point(aes(x=mu.star, y=sigma,label = model.morris$factors),size=1) +
  geom_text(aes(x=mu.star, y=sigma,label = model.morris$factors),size=3,hjust=1.1)
g

```

Annova pour la concentration en calcite
========================================================
```{r, echo = FALSE}
#### ANNOVA
# To identify the different interaction between variables and the important variable for the output Y1 : 
annova = aov(data$Y.X.wgt_calcite~(.)^2,data=data)
interaction = annova$coefficients[-1] # On enlève l'intercept
#plot(annova)
interaction = data.frame(Mixing = names(interaction),value = interaction)
interaction = interaction[order(interaction[,2], decreasing = T),]
interaction = interaction [1:25,]
p<-ggplot(data=interaction, aes(x=reorder(Mixing,value), y=value)) +
  geom_bar(stat="identity") 
p <- p + geom_bar(stat="identity", fill="steelblue") +
  geom_text(aes(label=round(interaction$value,5)), hjust=1.6,color="white", size=3.5)
p + coord_flip() + ggtitle("Anova of interaction and influent variables")
```